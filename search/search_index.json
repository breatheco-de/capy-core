{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What does this","text":"<p>This package provides the core functionalities for an API Rest.</p>"},{"location":"changelog/v1.0.0/","title":"v1.0.0","text":"<ul> <li>Add translations.</li> <li>Add feature flags.</li> <li>Add ValidationException.</li> <li>Add PaymentException.</li> <li>Add database fixtures.</li> <li>Add format fixtures.</li> <li>Add image fixtures.</li> <li>Add random fixtures.</li> <li>Add datetime fixtures.</li> <li>Add queryset fixtures.</li> <li>Add signals fixtures.</li> <li>Add client and aclient fixtures.</li> <li>Add fake fixture as shortcut.</li> </ul>"},{"location":"changelog/v1.0.3/","title":"v1.0.3","text":"<ul> <li>Add flags file and manager.</li> </ul>"},{"location":"changelog/v1.1.0/","title":"v1.1.0","text":"<ul> <li>Improve the support for languages like <code>es-419</code>.</li> </ul>"},{"location":"changelog/v1.1.1/","title":"v1.1.1","text":"<ul> <li>Fix dependency issue with <code>langcodes</code>.</li> </ul>"},{"location":"changelog/v1.2.0/","title":"v1.2.0","text":"<ul> <li>Add to capy serializers support for compression, pagination, caching, help page and query params.</li> </ul>"},{"location":"changelog/v1.2.1/","title":"v1.2.1","text":"<ul> <li>Add some fixes to Capy Serializers.</li> </ul>"},{"location":"changelog/v1.2.2/","title":"v1.2.2","text":"<ul> <li>Add some fixes to Capy Serializers.</li> </ul>"},{"location":"changelog/v1.3.0/","title":"v1.3.0","text":"<ul> <li>Add cache revalidation and fix cache deletion.</li> </ul>"},{"location":"changelog/v1.3.1/","title":"v1.3.0","text":"<ul> <li>Fix get_serializer_path.</li> </ul>"},{"location":"exceptions/payment-exception/","title":"PaymentException","text":"<p>Exception that represents a payment error.</p>"},{"location":"exceptions/payment-exception/#params","title":"Params","text":"<ul> <li>details (<code>str</code>): error description.</li> <li>slug (<code>Optional[str]=None</code>): status code.</li> <li>data (<code>Any=None</code>): data to be used as context.</li> <li>queryset (<code>Optional[QuerySet]=None</code>): queryset related to this error.</li> <li>silent (<code>bool=False</code>): if True, it returns an error not shown to the user, and <code>slug</code> as <code>silent_code</code>.</li> </ul>"},{"location":"exceptions/payment-exception/#example","title":"Example","text":"<pre><code>from capyc.rest_framework.exceptions import ValidationException\nfrom myapp.models import MyModel\n\n\nraise ValidationException(\"my error\")\nraise ValidationException(\"my error\", slug=\"my_error\")\n\nqs = MyModel.objects.filter(id__in=[...])\nraise ValidationException(\"you cannot access to this resource\", queryset=qs, data={\"ids\": [...]})\n\nraise ValidationException(\"you cannot access to this resource\", slug=\"bad-resource\", silent=True, data={\"allowed_resources\": [...]})\n</code></pre>"},{"location":"exceptions/validation-exception/","title":"ValidationException","text":"<p>Exception that represents a generic HTTP error.</p>"},{"location":"exceptions/validation-exception/#params","title":"Params","text":"<ul> <li>details (<code>str</code>): error description.</li> <li>code (<code>int=400</code>): status code.</li> <li>slug (<code>Optional[str]=None</code>): status code.</li> <li>data (<code>Any=None</code>): data to be used as context.</li> <li>queryset (<code>Optional[QuerySet]=None</code>): queryset related to this error.</li> <li>silent (<code>bool=False</code>): if True, it returns an error not shown to the user, and <code>slug</code> as <code>silent_code</code>.</li> </ul>"},{"location":"exceptions/validation-exception/#example","title":"Example","text":"<pre><code>from capyc.rest_framework.exceptions import ValidationException\nfrom myapp.models import MyModel\n\n\nraise ValidationException(\"my error\")\nraise ValidationException(\"not found\", code=404)\nraise ValidationException(\"not found\", code=404, slug=\"not-found\")\n\nqs = MyModel.objects.filter(id__in=[...])\nraise ValidationException(\"deletion are not allowed\", code=409, queryset=qs, data={\"ids\": [...]})\n\nraise ValidationException(\"bad type\", slug=\"bad-type\", silent=True, data={\"allowed_types\": [...]})\n</code></pre>"},{"location":"feature-flags/availability/","title":"Availability","text":"<p>it acts like a feature toggle.</p>"},{"location":"feature-flags/availability/#featureavailability","title":"<code>feature.availability</code>","text":"<p>It returns a handler to be used with <code>feature.add</code>, the provided function is used with <code>feature.is_enabled</code>.</p>"},{"location":"feature-flags/availability/#availability-params","title":"Availability params","text":"<ul> <li>name (<code>str</code>): toggle name.</li> <li>frontend (<code>bool=True</code>): if true, it could be accessed using an API Rest.</li> <li>default (<code>Optional[bool]=None</code>): if it returns None, it uses this value instead.</li> </ul>"},{"location":"feature-flags/availability/#decorated-function-params","title":"Decorated function params","text":"<ul> <li>**named (<code>Any</code>): any argument, any type.</li> </ul>"},{"location":"feature-flags/availability/#example","title":"Example","text":"<pre><code>from capyc.core.managers import feature\nfrom yourapp.models import User\n\n\n@feature.availability(\"activity.logs\")\ndef enable_activity() -&gt; bool:\n    env = os.getenv(\"MY_ENV\")\n    if env in feature.TRUE:\n        return True\n\n    if env in feature.FALSE:\n        return False\n\n\n@feature.availability(\"auth.new_design\")\ndef enable_new_design(user: User) -&gt; bool:\n    return user.id % 15 == 0\n\n\nfeature.add(enable_activity, enable_new_design)\n</code></pre>"},{"location":"feature-flags/availability/#featureis_enabled","title":"<code>feature.is_enabled</code>","text":"<p>Get the result of the evaluation of the provided function, if None, get the default provided, else <code>False</code>.</p>"},{"location":"feature-flags/availability/#params","title":"params","text":"<ul> <li>name (<code>str</code>): toggle name.</li> <li>context (<code>dict[str, Any]={}</code>): function arguments.</li> <li>default (<code>Optional[bool]=None</code>): if it returns None, it uses this value instead.</li> </ul>"},{"location":"feature-flags/availability/#example_1","title":"Example","text":"<pre><code>from capyc.core.managers import feature\nfrom yourapp.models import User\n\n\n# make sure that flags have been have loaded previously.\nif feature.is_enabled(\"activity.logs\", default=False):\n    ...\nelse:\n    ...\n\nuser1 = User.objects.get(id=1)\nif feature.is_enabled(\"auth.new_design\", context={'user': user1}):\n    ...\nelse:\n    ...\n\nuser2 = User.objects.get(id=2)\ncontext = feature.context(user=user2)\nif feature.is_enabled(\"auth.new_design\", context=context):\n    ...\nelse:\n    ...\n</code></pre>"},{"location":"feature-flags/flags-file/","title":"Flags File","text":"<p>The <code>.flags</code> file is used to define feature flags for your application. Each flag can be used to control the availability or variant of a feature.</p>"},{"location":"feature-flags/flags-file/#example-flags-file","title":"Example <code>.flags</code> File","text":"<pre><code># .flags\n\n# Feature flags for availability\nFEATURE_A=true\nFEATURE_B=false\n\n# Feature flags for variants\nVARIANT_X=beta\nVARIANT_Y=stable\n\n# Additional flags\nNEW_UI_ENABLED=true\nEXPERIMENTAL_FEATURE=false\n</code></pre>"},{"location":"feature-flags/introduction/","title":"Introduction","text":"<p>A feature flag is a condition within the code that enables or disables a feature during runtime.</p>"},{"location":"feature-flags/reading-flags/","title":"Reading Flags","text":"<p>You could access flags in your code using the <code>feature.flags</code> property.</p> <pre><code>from capyc.core.managers import feature\n\n\nflags = feature.flags\n</code></pre>"},{"location":"feature-flags/reading-flags/#featureflagsget","title":"<code>feature.flags.get</code>","text":"<p>You could read flags in your code using the <code>feature.flags.get</code> method, it could return a <code>str</code> or <code>None</code> if not exists.</p> <pre><code>from capyc.core.managers import feature\n\nflags = feature.flags\n\nflags.get(\"FEATURE_A\")\n</code></pre>"},{"location":"feature-flags/variant/","title":"Variant","text":"<p>it acts like a feature toggle.</p>"},{"location":"feature-flags/variant/#featurevariant","title":"<code>feature.variant</code>","text":"<p>It returns a handler to be used with <code>feature.add</code>, the provided function is used with <code>feature.get_variant</code>.</p>"},{"location":"feature-flags/variant/#variant-params","title":"Variant params","text":"<ul> <li>name (<code>str</code>): toggle name.</li> <li>frontend (<code>bool=True</code>): if true, it could be accessed using an API Rest.</li> <li>default (<code>Optional[str]=None</code>): if it returns None, it uses this value instead.</li> </ul>"},{"location":"feature-flags/variant/#decorated-function-params","title":"Decorated function params","text":"<ul> <li>**named (<code>Any</code>): any argument, any type.</li> </ul>"},{"location":"feature-flags/variant/#example","title":"Example","text":"<pre><code>from capyc.core.managers import feature\nfrom yourapp.models import User\n\n\n@feature.variant(\"admissions.academy.brand-color\")\ndef brand_color() -&gt; bool:\n    return os.getenv(\"BRAND_COLOR\")\n\n\n@feature.variant(\"auth.alert-color\")\ndef alert_color(user: User) -&gt; bool:\n    if  user.id % 15 == 0:\n        return \"VIOLET\"\n\n    if \"@gmail\" in user.email:\n        return \"ORANGE\"\n\n    return \"YELLOW\"\n\n\nfeature.add(brand_color, alert_color)\n</code></pre>"},{"location":"feature-flags/variant/#featureget_variant","title":"<code>feature.get_variant</code>","text":"<p>Get the result of the evaluation of the provided function, if None, get the default provided, else <code>unknown</code>.</p>"},{"location":"feature-flags/variant/#params","title":"params","text":"<ul> <li>name (<code>str</code>): toggle name.</li> <li>context (<code>dict[str, Any]={}</code>): function arguments.</li> <li>default (<code>Optional[str]=None</code>): if it returns None, it uses this value instead.</li> </ul>"},{"location":"feature-flags/variant/#example_1","title":"Example","text":"<pre><code>from capyc.core.managers import feature\nfrom yourapp.models import User\n\n\n# make sure that flags have been loaded previously.\nvariant1 = feature.get_variant(\"admissions.academy.brand-color\", default=\"BLUE\")\n\nuser1 = User.objects.get(id=1)\nvariant2 = feature.get_variant(\"auth.alert-color\", context={'user': user1})\n\nuser2 = User.objects.get(id=2)\ncontext = feature.context(user=user2)\nvariant3 = feature.get_variant(\"auth.alert-color\", context=context)\n</code></pre>"},{"location":"fixtures/circuitbreaker/dont-close-the-circuit/","title":"dont_close_the_circuit","text":"<p>It avoids close the circuit in tests.</p>"},{"location":"fixtures/core/clean-environment/","title":"clean_environment","text":"<p>It resets the environment before starting each test. Set the <code>ENV</code> environment variable to <code>test</code>.</p>"},{"location":"fixtures/core/fake/","title":"fake","text":"<p>Fake instance.</p>"},{"location":"fixtures/core/fake/#example","title":"Example","text":"<pre><code>import capyc.pytest as capy\n\n\ndef test_something(fake: capy.Fake):\n    x = fake.slug()\n    assert '-' in x\n</code></pre>"},{"location":"fixtures/core/format/","title":"format","text":"<p>Set of utilities for formatting values.</p>"},{"location":"fixtures/core/format/#to_obj_repr","title":"<code>to_obj_repr</code>","text":"<p>Transform a Django QuerySet and an object in a <code>list</code> or <code>dict</code>.</p>"},{"location":"fixtures/core/format/#example","title":"Example","text":"<pre><code>import capyc.pytest as capy\nfrom my_app.models import MyModel\n\n\ndef test_something1(format: capy.Format):\n    qs = MyModel.objects.filter()\n    x = format.to_obj_repr(qs)\n    assert isinstance(x, list)\n\n\ndef test_something2(format: capy.Format):\n    obj = MyModel.objects.filter().first()\n    x = format.to_obj_repr(obj)\n    assert isinstance(x, dict)\n</code></pre>"},{"location":"fixtures/core/image/","title":"image","text":"<p>Set of utilities for formatting values.</p>"},{"location":"fixtures/core/image/#random","title":"<code>random</code>","text":"<p>Generate a random .png file and return the file object.</p>"},{"location":"fixtures/core/image/#example","title":"Example","text":"<pre><code>import capyc.pytest as capy\n\n\ndef test_something(image: capy.Image):\n    f = image.random(qs)\n    content = f.read()\n    ...\n</code></pre>"},{"location":"fixtures/core/no-http-requests/","title":"no_http_requests","text":"<p>Avoid requests to third party services, that are used automatically.</p>"},{"location":"fixtures/core/random/","title":"random","text":"<p>Set of utilities for generating random values.</p>"},{"location":"fixtures/core/random/#seed","title":"<code>seed</code>","text":"<p>Wrapper of random.seed, currently does not working with Faker.</p>"},{"location":"fixtures/core/random/#example","title":"Example","text":"<pre><code>import random as r\nimport capyc.pytest as capy\n\n\ndef test_something(random: capy.Random):\n    random.seed(1337)\n    x = r.randint(0, 100)\n    assert x == 79\n</code></pre>"},{"location":"fixtures/core/random/#tuple-and-args","title":"<code>tuple</code> and <code>args</code>","text":"<p>Wrapper of fake.pytuple.</p>"},{"location":"fixtures/core/random/#example_1","title":"Example","text":"<pre><code>import capyc.pytest as capy\n\n\ndef test_something1(random: capy.Random):\n    x = random.tuple(5)\n    assert isinstance(x, tuple)\n    assert len(x) == 5\n\n\ndef test_something2(random: capy.Random):\n    x = random.args(5)\n    assert isinstance(x, tuple)\n    assert len(x) == 5\n</code></pre>"},{"location":"fixtures/core/random/#dict-and-kwargs","title":"<code>dict</code> and <code>kwargs</code>","text":"<p>Wrapper of fake.pydict.</p>"},{"location":"fixtures/core/random/#example_2","title":"Example","text":"<pre><code>import capyc.pytest as capy\n\n\ndef test_something1(random: capy.Random):\n    x = random.dict(5)\n    assert isinstance(x, dict)\n    assert len(x) == 5\n\n\ndef test_something2(random: capy.Random):\n    x = random.kwargs(5)\n    assert isinstance(x, dict)\n    assert len(x) == 5\n</code></pre>"},{"location":"fixtures/core/random/#int","title":"<code>int</code>","text":"<p>Wrapper of random.randint, defaults <code>min=0</code> and <code>max=1000</code>.</p>"},{"location":"fixtures/core/random/#example_3","title":"Example","text":"<pre><code>import capyc.pytest as capy\n\n\ndef test_something(random: capy.Random):\n    x = random.int(10, 100)\n    assert isinstance(x, int)\n</code></pre>"},{"location":"fixtures/core/random/#string","title":"<code>string</code>","text":"<p>Build a string that could include each elements specified, default params <code>size=0</code>, <code>lower=False</code>, <code>upper=False</code>, <code>symbol=False</code>, <code>number=False</code>.</p>"},{"location":"fixtures/core/random/#example_4","title":"Example","text":"<pre><code>import capyc.pytest as capy\n\n\ndef test_something(random: capy.Random):\n    x = random.int(size=15, lower=True, number=True, symbol=True)\n    assert isinstance(x, str)\n    assert len(x) == 15\n</code></pre>"},{"location":"fixtures/django/database/","title":"database","text":"<p>Utils to manage the database like Mixer does.</p>"},{"location":"fixtures/django/database/#get_model","title":"<code>get_model</code>","text":"<p>Get model using a path.</p>"},{"location":"fixtures/django/database/#example","title":"example:","text":"<pre><code>import capyc.pytest as capy\n\n\ndef test_something(database: capy.Database):\n MyModel = database.get_model('myapp.MyModel')\n</code></pre>"},{"location":"fixtures/django/database/#create","title":"<code>create</code>","text":"<p>Create model instances like Mixer does.</p>"},{"location":"fixtures/django/database/#status","title":"Status","text":"<p>Release cantidate.</p>"},{"location":"fixtures/django/database/#arguments","title":"Arguments","text":""},{"location":"fixtures/django/database/#format","title":"Format","text":"<p>It must be model_name or app__model_name.</p>"},{"location":"fixtures/django/database/#value","title":"Value","text":"<ul> <li>number: number of elements to be created.</li> <li>dict: attributes of the object to be created.</li> <li>tuple(number, dict): number of elements to be created and atributes that it must have.</li> <li>list(dict, dict, ...): create an object per dict in the list with the following properties.</li> </ul>"},{"location":"fixtures/django/database/#relationships","title":"Relationships","text":"<ul> <li>Each model related to a model that requires other models, and it cannot be black or null, it will be created automatically.</li> <li>To manage a relation to one model use <code>{\"my_rel_id\": 7}</code>.</li> <li>To manage a relation to many models use <code>{\"my_rels\": [7, 8, 9]}</code>.</li> </ul>"},{"location":"fixtures/django/database/#example_1","title":"example:","text":"<pre><code>import capyc.pytest as capy\nfrom inferredapp.models import MyModel\nfrom myapp1.models import MyModel2 as App1MyModel2\nfrom myapp2.models import MyModel2 as App2MyModel2\nfrom myapp3.models import MyModel1, MyModel3, MyModel4, MyModel5, MyModel6\n\n\ndef test_something1(database: capy.Database):\n model = database.create(\n\u00a0 \u00a0 my_model=1, # inferred the app, and create one MyModel instance\n\u00a0 \u00a0 myapp1__my_model2=1, # create one 'myapp1.MyModel2' instance\n\u00a0 \u00a0 myapp2__my_model2=1, # create one 'myapp2.MyModel2' instance\n )\n\u00a0 \u00a0 assert model.keys() == ['my_model', 'myapp1__my_model2', 'myapp2__my_model2']\n\u00a0 \u00a0 assert isinstance(model.my_model, MyModel)\n\u00a0 \u00a0 assert isinstance(model.myapp1__my_model2, App1MyModel2)\n\u00a0 \u00a0 assert isinstance(model.myapp2__my_model2, App2MyModel2)\n\n\ndef test_something2(database: capy.Database):\n model = database.create(\n\u00a0 \u00a0 my_model1=2, # create 2 instances of MyModel1\n\u00a0 \u00a0 my_model3={'my_attr': 'my_value'}, # create one instance of MyModel3 and set `my_attr` to `my_value`\n\u00a0 \u00a0 my_model4=(2, {'my_attr': 'my_value'}), # create two instances of MyModel4 and set `my_attr` to `my_value`\n\u00a0 \u00a0 my_model5={'my_model_id': 1}, # create one instance of MyModel5 and set the relation of my_model to MyModel\n\u00a0 \u00a0 my_model6={'my_models': [1]}, # create one instance of MyModel6 and set the m2m relations of my_models to [MyModel]\n )\n\u00a0 \u00a0 assert model.keys() == ['my_model', 'my_model1', 'my_model3', 'my_model4', 'my_model5', 'my_model6']\n\u00a0 \u00a0 assert isinstance(model.my_model, MyModel)\n\n\u00a0 \u00a0 assert len(model.my_model1) == 2\n\u00a0 \u00a0 assert all([isinstance(x, MyModel1) for x in model.my_model1])\n\n\u00a0 \u00a0 assert isinstance(model.my_model3, MyModel3)\n\n\u00a0 \u00a0 assert len(model.my_model4) == 2\n\u00a0 \u00a0 assert all([isinstance(x, MyModel4) and x.my_attr == 'my_value' for x in model.my_model4])\n\n\u00a0 \u00a0 assert isinstance(model.my_model5, MyModel5)\n\u00a0 \u00a0 assert model.my_model5.id == model.my_model.id\n\n\u00a0 \u00a0 assert isinstance(model.my_model6, MyModel6)\n\u00a0 \u00a0 assert all([x.id == model.my_model.id for x in model.my_model6.my_models.all()])\n</code></pre>"},{"location":"fixtures/django/database/#acreate","title":"<code>acreate</code>","text":"<p>Async wrapper of <code>create</code>.</p>"},{"location":"fixtures/django/database/#example_2","title":"Example:","text":"<pre><code>import pytest\nimport capyc.pytest as capy\n\n\n@pytest.mark.asyncio\n@pytest.mark.django_db(reset_sequences=True)\nasync def test_something(aclient: capy.AsyncClient):\n model = await database.acreate(...)\n</code></pre>"},{"location":"fixtures/django/database/#list_of","title":"<code>list_of</code>","text":"<p>Get list of instances of a model.</p>"},{"location":"fixtures/django/database/#example_3","title":"example:","text":"<pre><code>def test_something1(database: capy.Database):\n    ...\n\u00a0 \u00a0 assert database.list_of('myapp.MyModel') == [\n        {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'my_attr1': 'my_value1',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'my_attr2': 'my_value2',\n        }\n   ]\n</code></pre>"},{"location":"fixtures/django/database/#alist_of","title":"<code>alist_of</code>","text":"<p>Get a list of instances of a model.</p>"},{"location":"fixtures/django/database/#example_4","title":"example:","text":"<pre><code>import pytest\nimport capyc.pytest as capy\n\n\n@pytest.mark.asyncio\n@pytest.mark.django_db(reset_sequences=True)\nasync def test_something1(database: capy.Database):\n ...\n\u00a0 \u00a0 assert await database.alist_of('myapp.MyModel') == [\n        {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'my_attr1': 'my_value1',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'my_attr2': 'my_value2',\n        }\n   ]\n</code></pre>"},{"location":"fixtures/django/datetime/","title":"datetime","text":"<p>Utils and shortcuts to manage datetime with <code>timezone.now</code>.</p>"},{"location":"fixtures/django/datetime/#now","title":"<code>now</code>","text":"<p>Wrapper to <code>timezone.now</code>, also frozen the current time using <code>set</code> method.</p>"},{"location":"fixtures/django/datetime/#example","title":"example:","text":"<pre><code>import time\nimport capyc.pytest as capy\nfrom my_app.models import MyModel\nfrom django.utils import timezone\nfrom datetime import datetime as dt\n\n\ndef test_something(datetime: capy.DateTime):\n    d1 = datetime.now()\n    time.sleep(5)\n    d2 = datetime.now()\n    d3 = timezone.now()\n    d4 = dt.now() # it's not mockable\n    assert d1 == d2\n    assert d1 == d3\n    assert d1 != d4\n</code></pre>"},{"location":"fixtures/django/datetime/#set","title":"<code>set</code>","text":"<p>Frozen and set <code>timezone.now</code> result.</p>"},{"location":"fixtures/django/datetime/#example_1","title":"example:","text":"<pre><code>import time\nimport capyc.pytest as capy\nfrom my_app.models import MyModel\nfrom django.utils import timezone\nfrom datetime import datetime as dt\n\n\ndef test_something1(datetime: capy.DateTime):\n    original = timezone.now()\n    datetime.set(original)\n\n    d1 = datetime.now()\n    time.sleep(5)\n    d2 = datetime.now()\n    d3 = timezone.now()\n    d4 = dt.now() # it's not mockable\n    assert d1 == original\n    assert d1 == d2\n    assert d1 == d3\n    assert d1 != d4\n\n\ndef test_something2(datetime: capy.DateTime):\n    datetime.set() # frozen now\n\n    d1 = datetime.now()\n    time.sleep(5)\n    d2 = datetime.now()\n    d3 = timezone.now()\n    d4 = dt.now() # it's not mockable\n    assert d1 == d2\n    assert d1 == d3\n    assert d1 != d4\n</code></pre>"},{"location":"fixtures/django/queryset/","title":"queryset","text":"<p>Utils to manage querysets.</p>"},{"location":"fixtures/django/queryset/#get_pks","title":"<code>get_pks</code>","text":"<p>Get primary keys from a QuerySet.</p>"},{"location":"fixtures/django/queryset/#example","title":"example:","text":"<pre><code>import capyc.pytest as capy\nfrom my_app.models import MyModel\n\ndef test_something(queryset: capy.QuerySet):\n    qs = MyModel.objects.filter()\n    x = queryset.get_pks(qs)\n    assert x == [1, 2, 3]\n</code></pre>"},{"location":"fixtures/django/queryset/#with_pks","title":"<code>with_pks</code>","text":"<p>Assert that a QuerySet contains the following primary keys.</p>"},{"location":"fixtures/django/queryset/#example_1","title":"example:","text":"<pre><code>import capyc.pytest as capy\nfrom my_app.models import MyModel\n\ndef test_something(queryset: capy.QuerySet):\n    qs = MyModel.objects.filter()\n    queryset.with_pks(qs, [1, 2, 3])\n</code></pre>"},{"location":"fixtures/django/signals/","title":"signals","text":"<p>Utils to manage signals.</p>"},{"location":"fixtures/django/signals/#disable","title":"<code>disable</code>","text":"<p>Avoid to call signals.</p>"},{"location":"fixtures/django/signals/#enable","title":"<code>enable</code>","text":"<p>Enable the following signals.</p>"},{"location":"fixtures/django/signals/#example","title":"example:","text":"<pre><code>import capyc.pytest as capy\n\n\ndef test_something(signals: capy.Signals):\n    signals.enable('path.to.my.signal1', 'path.to.my.signal2', ...)\n</code></pre>"},{"location":"fixtures/django/utc_now/","title":"utc_now","text":"<p><code>datetime.now</code> fixture shortcut.</p>"},{"location":"fixtures/django/utc_now/#example","title":"example:","text":"<pre><code>import time\nimport capyc.pytest as capy\nfrom my_app.models import MyModel\nfrom django.utils import timezone\nfrom datetime import datetime\n\n\ndef test_something(utc_now: datetime):\n    d1 = timezone.now()\n    time.sleep(5)\n    d2 = timezone.now()\n    d3 = datetime.now() # it's not mockable\n    assert utc_now == d1\n    assert utc_now == d2\n    assert utc_now != d3\n</code></pre>"},{"location":"fixtures/newrelic/disable-new-relic-prints/","title":"disable_new_relic_prints","text":"<p>Disable New Relic prints.</p>"},{"location":"fixtures/newrelic/disable-new-relic/","title":"disable_new_relic","text":"<p>Disable some New Relic features.</p>"},{"location":"fixtures/rest_framework/aclient/","title":"aclient","text":"<p>Async wrapper of APIClient.</p>"},{"location":"fixtures/rest_framework/aclient/#example","title":"Example","text":"<pre><code>import pytest\nimport capyc.pytest as capy\nfrom rest_framework import status\n\n@pytest.mark.asyncio\n@pytest.mark.django_db(reset_sequences=True)\nasync def test_something(aclient: capy.AsyncClient):\n    url = \"https://myapi.com/myresource\"\n\n    response = await client.get(url, data)\n    json = response.json()\n\n    assert json == {...}\n    assert response.status_code == status.HTTP_200_OK\n</code></pre>"},{"location":"fixtures/rest_framework/client/","title":"client","text":"<p>Wrapper of APIClient.</p>"},{"location":"fixtures/rest_framework/client/#example","title":"Example","text":"<pre><code>import capyc.pytest as capy\nfrom rest_framework import status\n\n\ndef test_something(client: capy.Client):\n    url = \"https://myapi.com/myresource\"\n\n    response = client.get(url, data)\n    json = response.json()\n\n    assert json == {...}\n    assert response.status_code == status.HTTP_200_OK\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>You should install capyc with a few optional dependencies running:</p> <pre><code>pip install capy-core[django,pytest]\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional dependencies","text":""},{"location":"getting-started/installation/#django","title":"django","text":"<ul> <li>django</li> <li>djangorestframework</li> <li>adrf</li> </ul>"},{"location":"getting-started/installation/#pytest","title":"pytest","text":"<ul> <li>numpy</li> <li>Pillow</li> <li>pytz</li> </ul>"},{"location":"getting-started/setup/","title":"Setup","text":"<p>Add our exception handler in your <code>settings.py</code>.</p> <pre><code>REST_FRAMEWORK = {\n    ...\n    \"EXCEPTION_HANDLER\": \"capyc.rest_framework.exception_handler.exception_handler\",\n    ...\n}\n</code></pre> <p>And this to your <code>conftest.py</code>.</p> <pre><code>pytest_plugins = (\n    \"capyc.pytest.core\",\n    \"capyc.pytest.newrelic\",\n    \"capyc.pytest.django\",\n    \"capyc.pytest.rest_framework\",\n    \"capyc.pytest.circuitbreaker\",\n)\n</code></pre>"},{"location":"i18n/translation/","title":"translation","text":"<p>Get translation from the following options, default to english.</p>"},{"location":"i18n/translation/#params","title":"Params","text":"<ul> <li>code (<code>str</code>): language code, it accepts the <code>ACCEPT</code> header value.</li> <li>**translation (<code>str</code>): list of translations, <code>en-US</code> is <code>en_us</code></li> <li>slug (<code>Optional[str]=None</code>): if it was provided, return the slug if the environment is test.</li> </ul>"},{"location":"i18n/translation/#example","title":"Example:","text":"<pre><code>from capyc.core.i18n import translation\n\n\nlang = ...\ntranslated1 = translation(lang, en=\"my text\", es=\"mi texto\")\ntranslated1 = translation(lang, en=\"my text\", es=\"mi texto\", slug=\"my-text\")\ntranslated3 = translation(\n    lang,\n    en_us=\"we cannot pronounce the T's\",\n    en_uk=\"we cannot pronounce the R's\",\n)\n</code></pre>"},{"location":"serializers/cache-control/","title":"Cache control","text":"<p>Capy Serializers supports cache control. You can set the <code>cache_control</code> attribute in the serializer to define the cache control headers, which can include directives such as <code>no-cache</code>, <code>no-store</code>, <code>must-revalidate</code>, <code>max-age</code>, and <code>public</code> or <code>private</code> to control how responses are cached by browsers and intermediate caches.</p>"},{"location":"serializers/cache-control/#example","title":"Example","text":"<pre><code>import capyc.django.serializer as capy\n\nclass PermissionSerializer(capy.Serializer):\n    cache_control = f\"max-age={60 * 60}\"  # 1 hour\n</code></pre>"},{"location":"serializers/cache-ttl/","title":"Cache TTL","text":"<p>Capy Serializers supports set a custom time to live for the cache, you can set <code>ttl</code> attribute in the serializer to set the cache TTL, after this time the cache will be invalidated. This value is in seconds.</p>"},{"location":"serializers/cache-ttl/#example","title":"Example","text":"<pre><code>import capyc.django.serializer as capy\n\nclass PermissionSerializer(capy.Serializer):\n    ttl = 60 * 60  # 1 hour\n</code></pre>"},{"location":"serializers/cache/","title":"Cache","text":"<p>Capy Serializers supports caching out of the box, with caching enabled by default. This package utilizes django-redis.</p>"},{"location":"serializers/cache/#settings","title":"Settings","text":"<pre><code>CAPYC = {\n    \"cache\": {\n        \"enabled\": True,\n    }\n}\n</code></pre>"},{"location":"serializers/compression/","title":"Compression","text":"<p>Capy Serializers supports compression out of the box, with compression enabled by default. This package supports <code>gzip</code>, <code>deflate</code>, <code>brotli</code>, and <code>zstandard</code>.</p>"},{"location":"serializers/compression/#settings","title":"Settings","text":"<pre><code>CAPYC = {\n    \"compression\": {\n        \"enabled\": True,\n        \"min_kb_size\": 10,\n    }\n}\n</code></pre>"},{"location":"serializers/field-sets/","title":"Field sets","text":"<p>Capy Serializers supports field sets, you can set <code>sets</code> attribute in the serializer, by default the fields provided in <code>default</code> set always are included in the response.</p> <p>In contract with <code>OData</code>, the <code>sets</code> parameter determines the included and expanded fields in the response.</p>"},{"location":"serializers/field-sets/#request","title":"Request","text":"<pre><code>GET /api/v1/users?sets=default,custom\n</code></pre>"},{"location":"serializers/field-sets/#serializer","title":"Serializer","text":"<pre><code>import capyc.django.serializer as capy\n\nclass PermissionSerializer(capy.Serializer):\n    fields = {\n        \"default\": (\"id\", \"name\"),\n        \"extra\": (\"codename\", \"content_type\"),\n        \"ids\": (\"content_type\", \"groups\"),\n        \"lists\": (\"groups\",),\n        \"expand_ids\": (\"content_type[]\",),\n        \"expand_lists\": (\"groups[]\",),\n    }\n</code></pre>"},{"location":"serializers/fields-overrides/","title":"Fields and filters overrides.","text":"<p>Capy Serializers supports overwrites fields names.</p>"},{"location":"serializers/fields-overrides/#example","title":"Example","text":"<pre><code>import capyc.django.serializer as capy\n\nclass PermissionSerializer(capy.Serializer):\n    model = Permission\n    fields = {\n        \"default\": (\"id\", \"name\"),\n        \"lists\": (\"groups\",),\n        \"expand_lists\": (\"groups[]\",),\n    }\n    rewrites = {\n        \"group_set\": \"groups\",\n    }\n    filters = (\"groups\",)\n    groups = GroupSerializer\n</code></pre>"},{"location":"serializers/help/","title":"Help","text":"<p>You can get info about the available field sets and filters by using the <code>help</code> query param.</p> <pre><code>GET /api/v1/users?help\n</code></pre>"},{"location":"serializers/introduction/","title":"Capy Serializers","text":"<p>Capy Serializers is a propose to replace DRF's Serializer, Serpy, and API View Extensions, the main difference respect to them is that Capy Serializers returns a Django Rest Framework compatible response.</p>"},{"location":"serializers/introduction/#usage","title":"Usage","text":"<pre><code>import capyc.django.serializer as capy\n\nclass PermissionSerializer(capy.Serializer):\n    model = Permission\n    path = \"/permission\"\n    fields = {\n        \"default\": (\"id\", \"name\"),\n        \"extra\": (\"codename\",),\n        \"ids\": (\"content_type\",),\n        \"lists\": (\"groups\",),\n        \"expand_ids\": (\"content_type[]\",),\n        \"expand_lists\": (\"groups[]\",),\n    }\n    rewrites = {\n        \"group_set\": \"groups\",\n    }\n    filters = (\"name\", \"codename\", \"content_type\", \"groups\")\n    depth = 2\n    content_type = ContentTypeSerializer\n    groups = GroupSerializer\n</code></pre>"},{"location":"serializers/introduction/#features","title":"Features","text":"<ul> <li>Field sets.</li> <li>Fields and filters overrides.</li> <li>Query params.</li> <li>Pagination.</li> <li>Sort by.</li> <li>Help.</li> <li>Compression.</li> <li>Cache.</li> <li>Cache ttl.</li> <li>Cache control.</li> <li>Query optimizations.</li> <li>Query depth.</li> </ul>"},{"location":"serializers/pagination/","title":"Pagination","text":"<p>Capy Serializers supports pagination out of the box, this feature cannot be disabled, you must provide the attribute <code>path</code> to the serializer to enable the links. This package supports <code>limit</code> and <code>offset</code> query params. Like GraphQL, all nested queries are automatically paginated. If you want to load more results, you can use the <code>next</code> link in the response.</p>"},{"location":"serializers/pagination/#example","title":"Example","text":"<pre><code>{\n    \"count\": 100,\n    \"previous\": \"http://localhost:8000/api/v1/users/?limit=10&amp;offset=0\",\n    \"next\": \"http://localhost:8000/api/v1/users/?limit=10&amp;offset=10\",\n    \"first\": \"http://localhost:8000/api/v1/users/?limit=10&amp;offset=0\",\n    \"last\": \"http://localhost:8000/api/v1/users/?limit=10&amp;offset=90\",\n    \"results\": [\n        ...\n        \"nested_m2m\": {\n            \"count\": 100,\n            \"previous\": \"http://localhost:8000/api/v1/m2m/?limit=10&amp;offset=0\",\n            \"next\": \"http://localhost:8000/api/v1/m2m/?limit=10&amp;offset=10\",\n            \"first\": \"http://localhost:8000/api/v1/m2m/?limit=10&amp;offset=0\",\n            \"last\": \"http://localhost:8000/api/v1/m2m/?limit=10&amp;offset=90\",\n            \"results\": [\n                ...\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"serializers/pagination/#settings","title":"Settings","text":"<p>You can configure the pagination settings in the <code>settings.py</code> file.</p> <pre><code>CAPYC = {\n    \"pagination\": {\n        \"pks\": 200,  # up to 1000\n        \"pages\": 20,  # up to 100\n    },\n}\n</code></pre>"},{"location":"serializers/query-depth/","title":"Query depth","text":"<p>Capy Serializers supports query depth, you can set <code>depth</code> attribute in the serializer to limit the depth of the query. Default depth is 2.</p>"},{"location":"serializers/query-depth/#example","title":"Example","text":"<pre><code>import capyc.django.serializer as capy\n\nclass PermissionSerializer(capy.Serializer):\n    depth = 3\n</code></pre>"},{"location":"serializers/query-optimizations/","title":"Query optimizations","text":"<p>Capy Serializers provides some optimizations out of the box, reducing the number of queries and the amount of data transferred.</p>"},{"location":"serializers/query-params/","title":"Query params","text":"<p>Capy Serializers supports automatic filtering from query params out of the box, this fields are limited from <code>filters</code> attribute and inherit the filters from its children.</p>"},{"location":"serializers/query-params/#operations","title":"Operations","text":""},{"location":"serializers/query-params/#greater-than","title":"Greater than","text":"<pre><code>GET /api/v1/users?age&gt;18\n</code></pre>"},{"location":"serializers/query-params/#less-than","title":"Less than","text":"<pre><code>GET /api/v1/users?age&lt;18\n</code></pre>"},{"location":"serializers/query-params/#greater-than-or-equal-to","title":"Greater than or equal to","text":"<pre><code>GET /api/v1/users?age&gt;=18\n</code></pre>"},{"location":"serializers/query-params/#less-than-or-equal-to","title":"Less than or equal to","text":"<pre><code>GET /api/v1/users?age&lt;=18\n</code></pre>"},{"location":"serializers/query-params/#equal-to","title":"Equal to","text":"<pre><code>GET /api/v1/users?age=18\n</code></pre>"},{"location":"serializers/query-params/#insensitive-equal-to","title":"Insensitive equal to","text":"<pre><code>GET /api/v1/users?name~=john\n</code></pre>"},{"location":"serializers/query-params/#in","title":"In","text":"<pre><code>GET /api/v1/users?age=18,20,22\n</code></pre>"},{"location":"serializers/query-params/#django-lookup","title":"Django Lookup","text":"<p>The supported filters are <code>exact</code>, <code>iexact</code>, <code>contains</code>, <code>icontains</code>, <code>gt</code>, <code>gte</code>, <code>lt</code>, <code>lte</code>, <code>in</code>, <code>startswith</code>, <code>istartswith</code>, <code>endswith</code>, <code>iendswith</code>, <code>range</code>, <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code>, <code>isnull</code>, <code>search</code>.</p> <pre><code>GET /api/v1/users?age[in]=18,20,22\n</code></pre>"},{"location":"serializers/query-params/#not","title":"Not","text":"<p>This operator is able to negate all the supported operations previously mentioned, the <code>!</code> operator must be prefixed to the operation.</p> <pre><code>GET /api/v1/users?age!=18\n</code></pre>"},{"location":"serializers/sort-by/","title":"Sort by","text":"<p>Capy Serializers supports sort by, you can set <code>sort_by</code> attribute in the serializer to sort the results by a field. Default sort by is <code>pk</code>, you can override this value using <code>sort_by</code> query param.</p>"},{"location":"serializers/sort-by/#example","title":"Example","text":"<pre><code>GET /api/v1/users?sort_by=name\n</code></pre>"}]}